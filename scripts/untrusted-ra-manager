#!/usr/bin/env python3.5

import socketserver
import socket
import json
import logging
import argparse

from sgx.util import check_json
from sgx.socket_util import receive_bytes
from sgx.untrusted.attestation import get_extended_epid_group_id
from sgx.untrusted.attestation import initialize_quoting_enclave
from sgx.untrusted.attestation import get_quote_size
from sgx.untrusted.attestation import get_quote


manager = None


class RequestHandler(socketserver.StreamRequestHandler):

    _request_num = 0

    def __init__(self, *args, **kwargs):
        self._request_num += 1
        self.id = self._request_num
        self.logger = logging.getLogger("Request#%s" % self.id)
        super(RequestHandler, self).__init__(*args, **kwargs)

    def handle(self):
        client_socket = self.request

        received_raw = receive_bytes(client_socket)
        received_json = json.loads(received_raw.decode('utf8'))
        check_json(received_json, dict)

        request = received_json["request"]
        self.logger.info("Got request %r", request)

        if request == "GET EPID":
            epid = get_extended_epid_group_id()
            self.send_epid(client_socket, epid)

        if request == "INIT QE":
            qe_target_info = initialize_quoting_enclave()
            self.send_qe_target_info(client_socket, qe_target_info)

        if request == "GET QUOTE":
            report = bytes.fromhex(received_json["report"])
            quote_type = received_json["quote_type"]
            spid = bytes.fromhex(received_json["spid"])
            nonce = bytes.fromhex(received_json["nonce"])
            revocation_list = bytes.fromhex(received_json["revocation_list"])

            self.logger.warning("revocation list: %r", revocation_list)

            quote_size = get_quote_size(revocation_list)
            quote, qe_report = get_quote(report, quote_type, spid, nonce, revocation_list, quote_size)

            self.send_quote(client_socket, quote, qe_report)

    def send_epid(self, client_socket: socket.socket, epid):
        self.logger.info("Preparing to send EPID")

        msg = json.dumps({"epid": epid}).encode()

        self.logger.info("Sending EPID (message size: %r)", len(msg))
        client_socket.sendall(msg)
        self.logger.info("EPID sent")

    def send_qe_target_info(self, client_socket: socket.socket, qe_target_info):
        self.logger.info("Preparing to send quoting enclave target info")

        msg = json.dumps({"qe_target_info": qe_target_info.hex()}).encode()

        self.logger.info("Sending quoting enclave target info (message size: %r)", len(msg))
        client_socket.sendall(msg)
        self.logger.info("Quoting enclave target info sent")

    def receive_report(self, client_socket: socket.socket):
        self.logger.info("Waiting for report")
        received_raw = receive_bytes(client_socket)
        received_json = json.loads(received_raw.decode('utf8'))
        check_json(received_json, dict, 1)

        return bytes.fromhex(received_json["report"])

    def send_quote(self, client_socket: socket.socket, quote, qe_report):
        self.logger.info("Preparing to send quote")

        msg = json.dumps({"quote": quote.hex(), "qe_report": qe_report.hex()}).encode()

        client_socket.sendall(msg)
        self.logger.info("Quote sent")


class Manager(object):
    def __init__(self, interface, port):
        self.interface = interface
        self.port = port
        self.server = socketserver.TCPServer((interface, port), RequestHandler)
        self.logger = logging.getLogger("Manager")

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.logger.info("Stopping server")
        self.server.server_close()

    def run(self):
        self.logger.info("Listening for attestation requests on %s:%s", self.interface, self.port)
        self.server.serve_forever()


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("--interface", "-i", default="127.0.0.1")
    parser.add_argument("--port", "-p", type=int, default=9876)
    parser.add_argument("--verbose", "-v", action="store_true")
    return parser.parse_args()


def init(args):
    if args.verbose:
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)


def main():
    args = parse_args()
    init(args)

    global manager
    with Manager(args.interface, args.port) as manager:
        manager.run()


if __name__ == "__main__":
    main()
