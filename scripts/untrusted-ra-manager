#!/usr/bin/env python3.5

import sys
import traceback
import socketserver
import socket
import json
import logging

try:
    from sgx.untrusted.attestation import get_extended_epid_group_id, initialize_quoting_enclave
except ImportError as e:
    print(traceback.format_exc(), file=sys.stderr)
    exit()


HOST = "127.0.0.1"
PORT = 9876

manager = None


class RequestHandler(socketserver.StreamRequestHandler):
    def handle(self):
        client_socket = self.request

        data = client_socket.recv(1024).strip()
        logging.info("Got request %r", data)

        if data == b"get_epid":
            self.send_epid(client_socket)

        if data == b"init_quote":
            qe_target_info = initialize_quoting_enclave()
            self.send_qe_target_info(client_socket, qe_target_info)

    def send_epid(self, client_socket: socket.socket):
        logging.info("Preparing to send EPID")

        epid = get_extended_epid_group_id()

        msg = json.dumps({"EPID": epid}).encode()

        logging.info("Sending EPID (message size: %r)", len(msg))
        client_socket.sendall(msg)

        logging.info("EPID sent")

    def send_qe_target_info(self, client_socket: socket.socket, qe_target_info):
        logging.info("Preparing to send quoting enclave target info")

        msg = json.dumps({"qe_target_info": qe_target_info.hex()}).encode()

        logging.info("Sending quoting enclave target info (message size: %r)", len(msg))
        client_socket.sendall(msg)

        logging.info("Quoting enclave target info sent")


class Manager(object):
    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        logging.info("Stopping server")
        self.server.server_close()

    def __init__(self):
        self.server = socketserver.TCPServer((HOST, PORT), RequestHandler)

    def run(self):
        logging.info("Listening for attestation requests on %s:%s", HOST, PORT)
        self.server.serve_forever()


def main():
    logging.basicConfig(level=logging.INFO)

    global manager
    with Manager() as manager:
        manager.run()


if __name__ == "__main__":
    main()