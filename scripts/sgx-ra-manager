#!/usr/bin/env python3-sgx

import socketserver
import socket
import logging
import argparse
import struct
import os

from sgx.util import get_challenger_public_key, check_msg
from sgx.socket_util import receive_msg, send_msg

# noinspection PyBroadException
try:
    from sgx.trusted.attestation import remote_attestation_context
    from sgx.trusted.attestation import get_new_public_key
    from sgx.trusted.attestation import process_msg2
    from sgx.trusted.attestation import get_msg3
except:
    logging.exception("")
    exit()


CHALLENGER_LT_PUBLIC_KEY = get_challenger_public_key()

logging_handlers = list()

manager = None
qm_port = None

application = None
arguments = None
run_in_parallel = False


class RequestHandler(socketserver.StreamRequestHandler):

    _request_num = 0

    def __init__(self, *args, **kwargs):
        self._request_num += 1
        self.id = self._request_num
        self.logger = logging.getLogger("Request#%s" % self.id)

        self.public_key = None
        self.challenger_public_key = None
        self.spid = None
        self.quote_type = None
        self.kdf_id = None
        self.key_signature = None
        self.msg2_mac = None
        self.revocation_list = None
        self.qe_target_info = None
        self.report = None
        self.nonce = None
        self.quote = None
        self.qe_report = None
        self.msg3_mac = None
        self.ps_sec_prop = None
        self.verification_result = None

        super(RequestHandler, self).__init__(*args, **kwargs)

    def handle(self):
        self.logger.info("Got request")

        client_socket = self.request

        request = client_socket.recv(1024)

        if request == b"attest":
            self.perform_attestation(client_socket)

    def perform_attestation(self, client_socket: socket.socket):
        self.send_msg0(client_socket)

        with remote_attestation_context(challenger_public_key=CHALLENGER_LT_PUBLIC_KEY,
                                        use_pse=0) as ra_context:

            self.create_msg1(ra_context)
            self.send_msg1(client_socket)

            self.receive_msg2(client_socket)
            self.process_msg2(ra_context)

            self.create_msg3(ra_context)
            self.send_msg3(client_socket)

            self.receive_msg4(client_socket)

        if self.verification_result and application and not run_in_parallel:
            run_application(application, arguments)

    # -------------------------------------------------------------------------
    # MSG0
    # -------------------------------------------------------------------------

    def send_msg0(self, client_socket: socket.socket):
        self.logger.info("Preparing to send msg0")
        extended_epid_gid = self.get_extended_epid_gid()
        msg0 = {"extended_epid_gid": extended_epid_gid}
        self.logger.info("Sending msg0")
        send_msg(client_socket, msg0)

    def get_extended_epid_gid(self):
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as ura_socket:
            ura_socket.connect(("127.0.0.1", qm_port))
            self.send_extended_epid_gid_request(ura_socket)
            return self.receive_extended_epid_gid(ura_socket)

    def send_extended_epid_gid_request(self, ura_socket: socket.socket):
        self.logger.info("Sending extended EPID group ID request")
        msg = {"request": "GET extended_epid_gid"}
        send_msg(ura_socket, msg)
        self.logger.info("Extended EPID group ID request sent")

    def receive_extended_epid_gid(self, ura_socket: socket.socket()):
        self.logger.info("Waiting for extended EPID group ID")
        msg = receive_msg(ura_socket)
        check_msg(msg, dict, 1)
        return msg["extended_epid_gid"]

    # -------------------------------------------------------------------------
    # MSG1
    # -------------------------------------------------------------------------

    def initialize_quoting_enclave(self):
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as ura_socket:
            ura_socket.connect(("127.0.0.1", qm_port))
            self.send_qe_init_request(ura_socket)
            return self.receive_qe_init_response(ura_socket)

    def send_qe_init_request(self, ura_socket: socket.socket):
        self.logger.info("Sending quoting enclave initialization request")
        msg = {"request": "INIT QE"}
        send_msg(ura_socket, msg)
        self.logger.info("Quoting enclave initialization request sent")

    def receive_qe_init_response(self, ura_socket: socket.socket()):
        self.logger.info("Waiting for quoting enclave target info")
        msg = receive_msg(ura_socket)
        check_msg(msg, dict, 2)
        return bytes.fromhex(msg["qe_target_info"]), bytes.fromhex(msg["epid_gid"])

    def create_msg1(self, ra_context):
        self.public_key = get_new_public_key(ra_context)
        self.qe_target_info, self.epid_gid = self.initialize_quoting_enclave()

    def send_msg1(self, client_socket: socket.socket):
        self.logger.info("Preparing to send msg1")
        msg1 = {"public_key": self.public_key.hex(),
                "epid_gid": self.epid_gid.hex()}
        self.logger.info("Sending msg1")
        send_msg(client_socket, msg1)

    # -------------------------------------------------------------------------
    # MSG2
    # -------------------------------------------------------------------------

    def receive_msg2(self, client_socket: socket.socket):
        self.logger.info("Waiting for msg2")

        msg2 = receive_msg(client_socket)
        check_msg(msg2, dict, 7)

        self.challenger_public_key = bytes.fromhex(msg2["public_key"])
        self.spid = bytes.fromhex(msg2["spid"])
        self.quote_type = struct.unpack("H", bytes.fromhex(msg2["quote_type"]))[0]
        self.kdf_id = struct.unpack("H", bytes.fromhex(msg2["kdf_id"]))[0]
        self.key_signature = bytes.fromhex(msg2["key_signature"])
        self.msg2_mac = bytes.fromhex(msg2["mac"])
        self.revocation_list = bytes.fromhex(msg2["revocation_list"])

        self.logger.info("Msg2 received")

    def process_msg2(self, ra_context):
        self.logger.info("Processing msg2")

        self.report, self.nonce = process_msg2(
            ra_context,
            self.qe_target_info,
            self.challenger_public_key,
            self.spid,
            self.quote_type,
            self.kdf_id,
            self.key_signature,
            self.msg2_mac,
            self.revocation_list
        )

        self.logger.info("Msg2 processed")

    # -------------------------------------------------------------------------
    # MSG3
    # -------------------------------------------------------------------------

    def create_msg3(self, ra_context):
        self.logger.info("Creating msg3")

        self.quote, self.qe_report = self.get_quote()

        self.msg3_mac, self.ps_sec_prop = get_msg3(
            ra_context,
            self.quote,
            self.qe_report
        )

        self.logger.info("Msg3 created")

    def get_quote(self):
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as ura_socket:
            ura_socket.connect(("127.0.0.1", qm_port))
            self.send_quote_request(ura_socket)
            return self.receive_quote(ura_socket)

    def send_quote_request(self, ura_socket: socket.socket):
        msg = {
            "request": "GET QUOTE",
            "report": self.report.hex(),
            "quote_type": self.quote_type,
            "spid": self.spid.hex(),
            "nonce": self.nonce.hex(),
            "revocation_list": self.revocation_list.hex()
        }

        self.logger.info("Sending quote request (message size: %s)", len(msg))
        send_msg(ura_socket, msg)
        self.logger.info("Quote request sent")

    def receive_quote(self, ura_socket: socket.socket()):
        self.logger.info("Waiting for quote")
        msg = receive_msg(ura_socket)
        check_msg(msg, dict, 2)
        self.logger.info("Quote received")
        return bytes.fromhex(msg["quote"]), bytes.fromhex(msg["qe_report"])

    def send_msg3(self, client_socket: socket.socket):
        self.logger.info("Preparing to send msg3")

        msg3 = {
            "quote": self.quote.hex(),
             "mac": self.msg3_mac.hex(),
             "ps_sec_prop": self.ps_sec_prop.hex()
        }

        self.logger.debug("Sending msg3 %r", msg3)
        send_msg(client_socket, msg3)
        self.logger.info("Msg3 sent")

    # -------------------------------------------------------------------------
    # MSG4
    # -------------------------------------------------------------------------

    def receive_msg4(self, client_socket: socket.socket):
        self.logger.info("Waiting for msg4")
        msg4 = receive_msg(client_socket)
        check_msg(msg4, dict, 1)
        self.logger.info("Msg4 received")
        self.verification_result = msg4["verification_result"]


class Manager(object):
    def __init__(self, interface, port):
        self.interface = interface
        self.port = port
        self.server = socketserver.TCPServer((interface, port), RequestHandler)
        self.server.handle_error = self.handle_error
        self.logger = logging.getLogger("Manager")

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.logger.info("Stopping server")
        self.server.server_close()

    # noinspection PyUnusedLocal
    def handle_error(self, request, client_address):
        self.logger.exception("Exception while handling request %r" % request)

    def run(self):
        self.logger.info("Listening for requests on %s:%s", self.interface, self.port)
        self.server.serve_forever()


def run_application_in_new_process(application, argv):
    # XXX: Fails with "bug() bookkeep/shim_vma.c:246"
    argv = [application] + argv
    logging.info("Executing %r", " ".join(argv))

    import subprocess
    subprocess.Popen(argv)


def run_application(application, argv):
    os.execvp(application, argv)


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("--interface", "-i", default="127.0.0.1")
    parser.add_argument("--port", "-p", type=int, default=6789)
    parser.add_argument("--qm-port", type=int, default=9876, help="Port of the quoting manager")
    parser.add_argument("--parallel", action="store_true", help="Execute the target executable in parallel with the remote attestation manager")
    parser.add_argument("--verbose", "-v", action="store_true")
    parser.add_argument("EXECUTABLE", nargs="?", help="Path to the remote attestation's target executable")
    parser.add_argument("ARGUMENTS", nargs=argparse.REMAINDER, help="Arguments passed to the target executable")
    return parser.parse_args()


def init(args):
    if args.verbose:
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)

    global qm_port
    qm_port = args.qm_port


def main():
    args = parse_args()
    init(args)

    global application, arguments
    application = args.EXECUTABLE
    arguments = args.ARGUMENTS
    run_in_parallel = args.parallel

    if run_in_parallel and args.EXECUTABLE:
        run_application_in_new_process(args.EXECUTABLE, args.ARGUMENTS)

    global manager
    with Manager(args.interface, args.port) as manager:
        manager.run()

    os.wait()


if __name__ == "__main__":
    # noinspection PyBroadException
    try:
        main()
    except:
        # Without this graphene's pal does not return on exceptions
        logging.exception("")
        exit()
