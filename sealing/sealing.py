# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_sealing')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_sealing')
    _sealing = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_sealing', [dirname(__file__)])
        except ImportError:
            import _sealing
            return _sealing
        if fp is not None:
            try:
                _mod = imp.load_module('_sealing', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _sealing = swig_import_helper()
    del swig_import_helper
else:
    import _sealing
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def cdata(ptr, nelements=1):
    return _sealing.cdata(ptr, nelements)
cdata = _sealing.cdata

def memmove(data, indata):
    return _sealing.memmove(data, indata)
memmove = _sealing.memmove
SGX_SEAL_IV_SIZE = _sealing.SGX_SEAL_IV_SIZE
class sgx_aes_gcm_data_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sgx_aes_gcm_data_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sgx_aes_gcm_data_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["payload_size"] = _sealing.sgx_aes_gcm_data_t_payload_size_set
    __swig_getmethods__["payload_size"] = _sealing.sgx_aes_gcm_data_t_payload_size_get
    if _newclass:
        payload_size = _swig_property(_sealing.sgx_aes_gcm_data_t_payload_size_get, _sealing.sgx_aes_gcm_data_t_payload_size_set)
    __swig_setmethods__["reserved"] = _sealing.sgx_aes_gcm_data_t_reserved_set
    __swig_getmethods__["reserved"] = _sealing.sgx_aes_gcm_data_t_reserved_get
    if _newclass:
        reserved = _swig_property(_sealing.sgx_aes_gcm_data_t_reserved_get, _sealing.sgx_aes_gcm_data_t_reserved_set)
    __swig_setmethods__["payload_tag"] = _sealing.sgx_aes_gcm_data_t_payload_tag_set
    __swig_getmethods__["payload_tag"] = _sealing.sgx_aes_gcm_data_t_payload_tag_get
    if _newclass:
        payload_tag = _swig_property(_sealing.sgx_aes_gcm_data_t_payload_tag_get, _sealing.sgx_aes_gcm_data_t_payload_tag_set)
    __swig_getmethods__["payload"] = _sealing.sgx_aes_gcm_data_t_payload_get
    if _newclass:
        payload = _swig_property(_sealing.sgx_aes_gcm_data_t_payload_get)

    def __init__(self):
        this = _sealing.new_sgx_aes_gcm_data_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sealing.delete_sgx_aes_gcm_data_t
    __del__ = lambda self: None
sgx_aes_gcm_data_t_swigregister = _sealing.sgx_aes_gcm_data_t_swigregister
sgx_aes_gcm_data_t_swigregister(sgx_aes_gcm_data_t)

class sgx_sealed_data_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, sgx_sealed_data_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, sgx_sealed_data_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["key_request"] = _sealing.sgx_sealed_data_t_key_request_set
    __swig_getmethods__["key_request"] = _sealing.sgx_sealed_data_t_key_request_get
    if _newclass:
        key_request = _swig_property(_sealing.sgx_sealed_data_t_key_request_get, _sealing.sgx_sealed_data_t_key_request_set)
    __swig_setmethods__["plain_text_offset"] = _sealing.sgx_sealed_data_t_plain_text_offset_set
    __swig_getmethods__["plain_text_offset"] = _sealing.sgx_sealed_data_t_plain_text_offset_get
    if _newclass:
        plain_text_offset = _swig_property(_sealing.sgx_sealed_data_t_plain_text_offset_get, _sealing.sgx_sealed_data_t_plain_text_offset_set)
    __swig_setmethods__["reserved"] = _sealing.sgx_sealed_data_t_reserved_set
    __swig_getmethods__["reserved"] = _sealing.sgx_sealed_data_t_reserved_get
    if _newclass:
        reserved = _swig_property(_sealing.sgx_sealed_data_t_reserved_get, _sealing.sgx_sealed_data_t_reserved_set)
    __swig_setmethods__["aes_data"] = _sealing.sgx_sealed_data_t_aes_data_set
    __swig_getmethods__["aes_data"] = _sealing.sgx_sealed_data_t_aes_data_get
    if _newclass:
        aes_data = _swig_property(_sealing.sgx_sealed_data_t_aes_data_get, _sealing.sgx_sealed_data_t_aes_data_set)

    def __init__(self):
        this = _sealing.new_sgx_sealed_data_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _sealing.delete_sgx_sealed_data_t
    __del__ = lambda self: None
sgx_sealed_data_t_swigregister = _sealing.sgx_sealed_data_t_swigregister
sgx_sealed_data_t_swigregister(sgx_sealed_data_t)


def sgx_calc_sealed_data_size(add_mac_txt_size, txt_encrypt_size):
    return _sealing.sgx_calc_sealed_data_size(add_mac_txt_size, txt_encrypt_size)
sgx_calc_sealed_data_size = _sealing.sgx_calc_sealed_data_size

def sgx_get_add_mac_txt_len(p_sealed_data):
    return _sealing.sgx_get_add_mac_txt_len(p_sealed_data)
sgx_get_add_mac_txt_len = _sealing.sgx_get_add_mac_txt_len

def sgx_get_encrypt_txt_len(p_sealed_data):
    return _sealing.sgx_get_encrypt_txt_len(p_sealed_data)
sgx_get_encrypt_txt_len = _sealing.sgx_get_encrypt_txt_len

def sgx_seal_data(additional_MACtext_length, p_additional_MACtext, text2encrypt_length, p_text2encrypt, sealed_data_size, p_sealed_data):
    return _sealing.sgx_seal_data(additional_MACtext_length, p_additional_MACtext, text2encrypt_length, p_text2encrypt, sealed_data_size, p_sealed_data)
sgx_seal_data = _sealing.sgx_seal_data

def sgx_seal_data_ex(key_policy, attribute_mask, misc_mask, additional_MACtext_length, p_additional_MACtext, text2encrypt_length, p_text2encrypt, sealed_data_size, p_sealed_data):
    return _sealing.sgx_seal_data_ex(key_policy, attribute_mask, misc_mask, additional_MACtext_length, p_additional_MACtext, text2encrypt_length, p_text2encrypt, sealed_data_size, p_sealed_data)
sgx_seal_data_ex = _sealing.sgx_seal_data_ex

def sgx_unseal_data(p_sealed_data, p_additional_MACtext, p_additional_MACtext_length, p_decrypted_text, p_decrypted_text_length):
    return _sealing.sgx_unseal_data(p_sealed_data, p_additional_MACtext, p_additional_MACtext_length, p_decrypted_text, p_decrypted_text_length)
sgx_unseal_data = _sealing.sgx_unseal_data

def sgx_mac_aadata(additional_MACtext_length, p_additional_MACtext, sealed_data_size, p_sealed_data):
    return _sealing.sgx_mac_aadata(additional_MACtext_length, p_additional_MACtext, sealed_data_size, p_sealed_data)
sgx_mac_aadata = _sealing.sgx_mac_aadata

def sgx_mac_aadata_ex(key_policy, attribute_mask, misc_mask, additional_MACtext_length, p_additional_MACtext, sealed_data_size, p_sealed_data):
    return _sealing.sgx_mac_aadata_ex(key_policy, attribute_mask, misc_mask, additional_MACtext_length, p_additional_MACtext, sealed_data_size, p_sealed_data)
sgx_mac_aadata_ex = _sealing.sgx_mac_aadata_ex

def sgx_unmac_aadata(p_sealed_data, p_additional_MACtext, p_additional_MACtext_length):
    return _sealing.sgx_unmac_aadata(p_sealed_data, p_additional_MACtext, p_additional_MACtext_length)
sgx_unmac_aadata = _sealing.sgx_unmac_aadata

def seal(secret, secret_len, plain_text, plain_text_len):
    return _sealing.seal(secret, secret_len, plain_text, plain_text_len)
seal = _sealing.seal

def unseal(sealed_buf):
    return _sealing.unseal(sealed_buf)
unseal = _sealing.unseal
# This file is compatible with both classic and new-style classes.


