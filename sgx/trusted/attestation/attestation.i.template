%module $(NAME)_swig

%{
#define SWIG_PYTHON_STRICT_BYTE_CHAR
#include "sgx_tseal.h"
#include "sgx_key.h"
#include "sgx_error.h"
#include "sgx_defs.h"
#include "sgx_attributes.h"
#include "sgx_tcrypto.h"
#include "sgx.h"
#include "sgx_defs.h"
#include "sgx_report.h"
#include "sgx_key_exchange.h"

#include "util.h"

typedef uint32_t sgx_ra_context_t;

extern void main();

extern void get_new_public_key(sgx_ra_context_t context, sgx_ec256_public_t** pp_enclave_public_key);
extern void initialize_remote_attestation(sgx_ec256_public_t enclave_public_key, int use_pse, sgx_ra_context_t* p_context);

extern void process_msg2(
    sgx_ra_context_t context,
    sgx_target_info_t qe_target_info,
    sgx_ec256_public_t public_key,
    sgx_spid_t spid,
    uint16_t quote_type,
    uint16_t kdf_id,
    sgx_ec256_signature_t key_signature,
    sgx_mac_t mac,
    uint32_t revocation_list_size,
    char* revocation_list,
    char* p_report
);

%}


%include "cdata.i"
%include "stdint.i"
%include "typemaps.i"
%include "cstring.i"
%include "sgx_defs.h"

%include "public_key.i"
%include "target_info.i"
%include "spid.i"
%include "signature.i"
%include "mac.i"


extern void main();


%apply uint32_t { sgx_ra_context_t context };
%apply sgx_ec256_public_t** pp_public_key { sgx_ec256_public_t** pp_enclave_public_key };
extern void get_new_public_key(sgx_ra_context_t context, sgx_ec256_public_t** pp_enclave_public_key);


%apply uint32_t* OUTPUT { sgx_ra_context_t* p_context };
%apply sgx_ec256_public_t public_key { sgx_ec256_public_t enclave_public_key };
extern void initialize_remote_attestation(sgx_ec256_public_t enclave_public_key, int use_pse, sgx_ra_context_t* p_context);


%apply sgx_target_info_t target_info { sgx_target_info_t qe_target_info };
%apply sgx_ec256_public_t public_key { sgx_ec256_public_t public_key };
%apply sgx_spid_t spid { sgx_spid_t spid };
%apply sgx_ec256_signature_t signature { sgx_ec256_signature_t key_signature };
%apply sgx_mac_t mac { sgx_mac_t mac };
%apply (char* STRING, size_t LENGTH) { (char* revocation_list, uint32_t revocation_list_size) };
%cstring_chunk_output(char* p_report, sizeof(sgx_report_t));

extern void process_msg2(
    sgx_ra_context_t context,
    sgx_target_info_t qe_target_info,
    sgx_ec256_public_t public_key,
    sgx_spid_t spid,
    uint16_t quote_type,
    uint16_t kdf_id,
    sgx_ec256_signature_t key_signature,
    sgx_mac_t mac,
    uint32_t revocation_list_size,
    char* revocation_list,
    char* p_report
);

%include "sgx_tcrypto.h"
