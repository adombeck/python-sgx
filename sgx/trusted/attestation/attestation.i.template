%module $(NAME)_swig

%{
#define SWIG_PYTHON_STRICT_BYTE_CHAR
#include "sgx_tseal.h"
#include "sgx_key.h"
#include "sgx_error.h"
#include "sgx_defs.h"
#include "sgx_attributes.h"
#include "sgx_tcrypto.h"
#include "sgx.h"
#include "sgx_defs.h"
#include "sgx_report.h"
#include "sgx_key_exchange.h"
#include "sgx_tae_service.h"

#include "util.h"
#include "except.h"

typedef uint32_t sgx_ra_context_t;

extern void main();

extern void get_new_public_key(sgx_ra_context_t context, sgx_ec256_public_t* p_enclave_public_key);
extern void initialize_remote_attestation(sgx_ec256_public_t enclave_public_key, int use_pse, sgx_ra_context_t* p_context);
extern void close_remote_attestation(sgx_ra_context_t context);

extern void process_msg2(
    sgx_ra_context_t context,
    sgx_target_info_t qe_target_info,
    sgx_ec256_public_t public_key,
    sgx_spid_t spid,
    uint16_t quote_type,
    uint16_t kdf_id,
    sgx_ec256_signature_t key_signature,
    sgx_mac_t mac,
    uint8_t* revocation_list,
    uint32_t revocation_list_size,
    sgx_report_t* p_report,
    sgx_quote_nonce_t* p_nonce
);

extern void get_msg3(
    sgx_ra_context_t context,
    uint8_t* quote,
    uint32_t quote_size,
    sgx_report_t qe_report,
    sgx_mac_t* p_mac,
    char* platform_service_security_properties
);

%}


%include "cdata.i"
%include "stdint.i"
%include "typemaps.i"
%include "cstring.i"

%include "sgx_defs.h"

%include "public_key.i"
%include "target_info.i"
%include "spid.i"
%include "signature.i"
%include "mac.i"
%include "report.i"
%include "nonce.i"


extern void main();


%apply uint32_t { sgx_ra_context_t context };
%apply sgx_ec256_public_t* p_public_key { sgx_ec256_public_t* p_enclave_public_key };
extern void get_new_public_key(sgx_ra_context_t context, sgx_ec256_public_t* p_enclave_public_key);


%exception {
  char *err;
  clear_exception();
  $action
  if ((err = check_exception())) {
    PyErr_SetString(PyExc_Exception, err);
    SWIG_fail;
  }
}


%apply uint32_t* OUTPUT { sgx_ra_context_t* p_context };
%apply sgx_ec256_public_t public_key { sgx_ec256_public_t enclave_public_key };
extern void initialize_remote_attestation(sgx_ec256_public_t enclave_public_key, int use_pse, sgx_ra_context_t* p_context);


%apply uint32_t { sgx_ra_context_t context };
extern void close_remote_attestation(sgx_ra_context_t context);


%apply sgx_target_info_t target_info { sgx_target_info_t qe_target_info };
%apply sgx_ec256_public_t public_key { sgx_ec256_public_t public_key };
%apply sgx_spid_t spid { sgx_spid_t spid };
%apply sgx_ec256_signature_t signature { sgx_ec256_signature_t key_signature };
%apply sgx_mac_t mac { sgx_mac_t mac };
%apply (char* STRING, size_t LENGTH) { (uint8_t* revocation_list, uint32_t revocation_list_size) };
%apply sgx_report_t* p_report { sgx_report_t* p_report };
%apply sgx_quote_nonce_t* p_nonce { sgx_quote_nonce_t* p_nonce };

extern void process_msg2(
    sgx_ra_context_t context,
    sgx_target_info_t qe_target_info,
    sgx_ec256_public_t public_key,
    sgx_spid_t spid,
    uint16_t quote_type,
    uint16_t kdf_id,
    sgx_ec256_signature_t key_signature,
    sgx_mac_t mac,
    uint8_t* revocation_list,
    uint32_t revocation_list_size,
    sgx_report_t* p_report,
    sgx_quote_nonce_t* p_nonce
);


%apply (char* STRING, size_t LENGTH) { (uint8_t* quote, uint32_t quote_size) };
%apply sgx_mac_t* p_mac { sgx_mac_t* p_mac };
%apply sgx_report_t report { sgx_report_t qe_report };
%cstring_chunk_output(char* platform_service_security_properties, sizeof(sgx_ps_sec_prop_desc_t));

extern void get_msg3(
    sgx_ra_context_t context,
    uint8_t* quote,
    uint32_t quote_size,
    sgx_report_t qe_report,
    sgx_mac_t* p_mac,
    char* platform_service_security_properties
);


%include "sgx_tcrypto.h"
